schema {
  query: Query
  mutation: Mutation
}

interface Event {
  eventId: String!
  notes: String
  roles: [Role!]
  start: String!
  type: EventType!
  name: String!
}

type User {
  username: String!
  password: String!
}

type MeetingEvent implements Event {
  eventId: String!
  location: String
  name: String!
  notes: String
  roles: [Role!]
  start: String!
  type: EventType!
  isMonthly: Boolean
  end: String!
}

type CollectiveEvent implements Event {
  eventId: String!
  notes: String
  roles: [Role!]
  start: String!
  type: EventType!
  end: String!
  name: String!
}

type BeekeepingEvent implements Event {
  eventId: String!
  notes: String
  name: String!
  roles: [Role!]
  start: String!
  type: EventType!
  jobs: [BeekeepingJob]!
  end: String
  completed: Boolean!
  hives: [String]
  participants: [TrelloMember!]
}

type Mutation {
  createEvent(input: EventInput!): Event!
  createUser(input: UserInput!): String!
  login(email: String!, password: String!): loginResponse!
  deleteEvent(eventId: String!): String!
  updateEvent(eventId: String!, input: EventInput!): Event!
  saveBeekeepingReport(eventId: String!, report: String! participants: [String!]!): saveReportResponse
}

type TrelloMember {
  id: String!
  fullName: String!
  username: String!
}

type Query {
  getEvents(limit: Int, 
            dateRange: [String],
            future: Boolean,
            type: [EventType],  
            isMonthly: Boolean,
            jobs:[BeekeepingJob],
            hives:[String]): [Event!]
  getEventById(eventId: String!): Event
  getTrelloMembers: [TrelloMember!]
  getTemplate(type:EventType!, job:BeekeepingJob) : [String]
}

type Role {
  roleName: String!
  user: TrelloMember!
}

enum EventType {
  BEEKEEPING
  COLLECTIVE
  MEETING
}

enum BeekeepingJob {
  INSPECT
  EXTRACT
  TREAT
  FEED
  HARVEST
  SPLIT
  NUC
  EQUIPMENT
}

input EventInput {
  end: String
  notes: String
  roles: [RoleInput!]!
  start: String!
  location: String
}

input MeetingEventInput {
  end: String!
  isMonthly: Boolean
}

input UserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  trello: String!
  code: String!
}

type loginResponse {
  access_token: String!
  name: String!
}

type saveReportResponse {
	message: String
}

input RoleInput {
  roleName: String!
  userName: String!
}

input BeekeepingEventInput {
  end: String!
  hiveId: String
  participants: [String]
  completed: Boolean!
  job: BeekeepingJob!
  location: String
  notes: String
  roles: [RoleInput!]!
  start: String!
  type: EventType!
}
