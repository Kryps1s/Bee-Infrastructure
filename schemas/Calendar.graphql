schema {
  query: Query
  mutation: Mutation
}

interface Event {
  eventId: String!
  notes: String
  roles: [Role!]
  start: String!
  type: EventType!
  name: String!
}

type User {
  userName: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  password: String!
}

type MeetingEvent implements Event {
  eventId: String!
  location: String
  name: String!
  notes: String
  roles: [Role!]
  start: String!
  type: EventType!
  isMonthly: Boolean
  end: String!
}

type CollectiveEvent implements Event {
  eventId: String!
  notes: String
  roles: [Role!]
  start: String!
  type: EventType!
  end: String!
  name: String!
}

type BeekeepingEvent implements Event {
  eventId: String!
  notes: String
  name: String!
  roles: [Role!]
  start: String!
  type: EventType!
  jobs: [BeekeepingJob]!
  end: String
  completed: Boolean!
  hives: [String]
  attendance: [User]
  prep: String
  specialInstructions: String
  inspection: String
  nextSteps: String
  additonalNotes: String
}


type Hive { 
  hiveId: String!
  name: String!
  location: String
  queen: Queen
  treatments: [Treatment]
  }

type Queen {
  age: String
  source: String
  type: String
  marked: Boolean
  markedColor: String
  clipped: Boolean
  lastSeen: String
}

type Treatment {
  name: String!
  date: String!
}

type Mutation {
  createEvent(input: EventInput!): Event!
  deleteEvent(eventId: String!): String!
  updateEvent(eventId: String!, input: EventInput!): Event!
  updateBeekeepingJob(eventId: String!, input: EventInput!): BeekeepingEvent!
}

type Query {
  getEvents(limit: Int, 
            dateRange: [String],
            future: Boolean,
            type: [EventType],  
            isMonthly: Boolean,
            jobs:[BeekeepingJob],
            hives:[String]): [Event!]
  getEventById(eventId: String!): Event
  getTemplate(type:EventType!, job:BeekeepingJob) : [String]
}

type Role {
  roleName: String!
  userName: String!
}

enum EventType {
  BEEKEEPING
  COLLECTIVE
  MEETING
}

enum BeekeepingJob {
  INSPECT
  EXTRACT
  TREAT
  FEED
  SPLIT
  NUC
  EQUIPMENT
}

input EventInput {
  end: String
  notes: String
  roles: [RoleInput!]!
  start: String!
  location: String
}

input MeetingEventInput {
  end: String!
  isMonthly: Boolean
}

input RoleInput {
  roleName: String!
  userName: String!
}

input BeekeepingEventInput {
  end: String!
  hiveId: String
  attendance: [String]
  completed: Boolean!
  job: BeekeepingJob!
  location: String
  notes: String
  roles: [RoleInput!]!
  start: String!
  type: EventType!
}
